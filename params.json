{
  "name": "Dotmgr",
  "tagline": "A small script that can help you maintain your dotfiles across several devices",
  "body": "# What is `dotmgr`?\r\n`dotmgr` is a little helper script you can use to manage and deploy your dotfiles across multiple\r\nmachines. The idea is to define tags for the different hosts, such as \"laptop\", \"headless\" or \"work\"\r\nand filter dotfile templates containing configurations for all hosts based on those tags.\r\n\r\n# Getting started\r\n## Initial run\r\nIf you already have a repository containing your dotfiles, you can simply clone it:\r\n```\r\ndotmgr -I git@github.com:<user>/dotfiles.git\r\n```\r\n\r\nIf the tag configuration is not found, `dotmgr` will automatically create one and commit it.\r\nIf you do not have a repository yet, you can let `dotmgr` create one for you:\r\n```\r\ndotmgr -I git@github.com:<user>/dotfiles.git\r\n```\r\n\r\nThis will also generate and commit an initial tag configuration.\r\n\r\nWhen the repository is set up, you can specialize and link all dotfiles in bootstrapping mode, which\r\nreads the tag configuration from the repository instead of your home directory:\r\n```\r\ndotmgr -Sbl\r\n```\r\n\r\nOn consecutive invocations of the script you can omit the `-b` flag, as the tag configuration is now\r\nsymlinked linked to your home directory. Please refer to the scripts `--help` option for more\r\ninformation on command line options and arguments.\r\n\r\n## Files and directories\r\n### Tag configuration\r\nThe script relies on a simple configuration file that defines active tags for hostnames in the\r\nfollowing format:\r\n```\r\nhostnameA: tagA1 tagA2 ...\r\nhostnameB: tagB1 tagB2 ...\r\n```\r\nThis file is normally read from `.config/dotmgr/tags.conf` in your home directory. You can\r\noverride this default by setting the environment variable `$DOTMGR_TAG_CONF`.\r\n\r\nYou can (and should) also store the configuration in your dotfile repository. The script provides a\r\nspecial command line option that allows you to read the tag configuration from your dotfile\r\nrepository the first time you run the script. Please see \"Getting started\" for details.\r\n\r\n### Dotfile repository\r\nDotfile templates - also called \"generic dotfiles\" - are stored in a git repository. Each dotfile's\r\npath relative to the repository's root directory is the same as relative to your home directory.\r\n\r\nSpecial comments in the dotfiles are used to indicate blocks (tag-blocks) that should either be\r\ncommented out or left intact, depending on the tags activated for a host. Note that for this to\r\nwork, the first line of a dotfile **must** begin with a comment.\r\n\r\nThe dotfile repository path default is `~/.local/share/dotmgr/repository`. It can be modified using\r\nthe environment variable `$DOTMGR_REPO`.\r\n\r\n### Stage directory\r\nThis directory contains the specific dotfiles for the current host, organized exactly as in your\r\nhome directory and the repository. During installation (specialization), dotmgr creates symlinks in\r\nyour home directory that point to the stage.\r\n\r\nThe default path is `~/.local/share/dotmgr/stage` and can be overriden with the environment\r\nvariable `$DOTMGR_STAGE`.\r\n\r\n## Workflow\r\nAfter you have changed a file, you can re-generalize it, for example:\r\n```\r\ndotmgr -G .vimrc\r\n```\r\nOmitting the file path (which has to be a path relative to your home directory) lets you generalize\r\nall dotfiles one by one.\r\n\r\nWhen files in the dotfile repository change, you can apply those changes to your \"hot\" dotfiles:\r\n```\r\ndotmgr -Sl\r\n```\r\nIt is always best to pass the `-l` option along, in order to automatically link new dotfiles. If\r\nyou want to specialize only a single file, just add its path to the command line.\r\n\r\nYou can tell `dotmgr` about a new dotfile it should care about by issuing:\r\n```\r\ndotmgr -A <file>\r\n```\r\nTo forget about a file, delete it from both the stage and the repository:\r\n```\r\ndotmgr -Dr <file>\r\n```\r\n\r\n## Git integration\r\nThe program can interact with the repository and automate or at least simplify some pretty\r\nrepetitive actions when managing dotfiles. There are options for\r\n* initialization or cloning of remote repositories as shown in \"Getting started\",\r\n* automatically committing changes to dotfiles,\r\n* automatically synchronizing with a remote repository before specialization / after generalization.\r\n\r\nIn addition, theres an option that lets you execute git commands in the dotfile repository without\r\nhaving to `cd` into it first. Please refer to `--help` for more information.\r\n\r\n# Filtering\r\n## Dotfile specialization\r\nThis is the workflow for generating specific dotfiles for the current hostname and installing them\r\nin the system:\r\n\r\n1. Read the tags activated for this hostname from the tag configuration\r\n2. Create specific dotfiles by (un)commenting tag-blocks\r\n3. Write them to the stage directory\r\n4. (optional) Create symlinks\r\n\r\n## Dotfile generalization\r\nThe generalized dotfile representation resides in the dotfile repository. Here, all tag-blocks are\r\nuncommented to allow editing using syntax highlighting.\r\n\r\nYou can create generic dotfiles from dotfiles currently on stage. This process, reverses the changes\r\nof the specialization and removes all comments from tag-blocks.\r\n\r\nYou can also directly add a file from the system, in which case the following steps are performed:\r\n\r\n1. Move the file to the stage\r\n2. Create a symlink to the file on stage\r\n3. Generalize the file\r\n4. Write it to the dotfile repository\r\n\r\n## Tag-blocks\r\nCreate tag-blocks using a double comment sequence and the keyword `only` or `not`. A double comment\r\nsequence followed by `end` ends a tag-block:\r\n```\r\n##only tagA tagB\r\n# ordinary comment\r\necho Hello dotmgr\r\n##end\r\n\r\n##not tagC\r\necho Non-tagC hosts only\r\n##end\r\n```\r\n\r\nTag-blocks can also be written in an if-else kind of style:\r\n```\r\n##only tagA\r\necho Hello dotmgr\r\n##not tagB\r\necho Cheers dotmgr\r\n##end\r\n```\r\n\r\n# Advanced vim magic\r\nAdding the following line to your .vimrc automagically invokes the script each time you save a\r\ndotfile in your home directory:\r\n```\r\nautocmd BufWritePost ~/.* !dotmgr -G %\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}