{
  "name": "Dotmgr",
  "tagline": "A small script that can help you maintain your dotfiles across several devices",
  "body": "# Dotfile Manager\r\nA tag-based dotfile manager for multiple machines written in Python3.\r\n\r\n## Dotfile repository\r\nThe generic dotfiles are stored in an external repository. Comments are used to indicate blocks\r\n(tag-blocks) that should be commented out or used (uncommented) when a certain tag is active.\r\nNote that for this to work, the first line of a dotfile must begin with a comment.\r\n\r\nThe dotfile repository path default is `~/repositories/dotfiles`. It can be modified using the\r\nenvironment variable `$DOTMGR_REPO`.\r\n\r\n## Tag configuration\r\nThe script relies on a simple configuration file that defines active tags for hostnames in the\r\nfollowing format:\r\n```\r\nhostnameA: tagA1 tagA2 ...\r\nhostnameB: tagB1 tagB2 ...\r\n```\r\nThis file is normally read from `.config/dotmgr/tags.conf` in your home directory. You can\r\noverride this default by setting the environment variable `$DOTMGR_TAG_CONF`.\r\n\r\nYou can (and should) also store the file in your dotfile repository. The script provides a special\r\ncommand line option that allows you to read the tag configuration from your dotfile repository the\r\nfirst time you run the script. Please see \"Getting started\" below for details.\r\n\r\n## Tag-blocks\r\nCreate tag-blocks using a double comment sequence and the keyword `only` or `not`. A double comment\r\nsequence followed by `end` ends a tag-block:\r\n```\r\n##only tagA tagB\r\n# ordinary comment\r\necho Hello dotmgr\r\n##end\r\n\r\n##not tagC\r\necho Non-tagC hosts only\r\n##end\r\n```\r\n\r\nTag-blocks can also be written in an if-else kind of style:\r\n```\r\n##only tagA\r\necho Hello dotmgr\r\n##not tagB\r\necho Cheers dotmgr\r\n##end\r\n```\r\n\r\n## Stage directory\r\nThis directory contains the specific dotfiles for the current host. During installation\r\n(specialization), dotmgr creates symlinks in the system ($HOME, /etc/(not yet)) that point to the\r\nstage.\r\n\r\nThe default path is `~/.local/share/dotmgr/stage` and can be overriden with the environment\r\nvariable `$DOTMGR_STAGE`.\r\n\r\n## Dotfile specialization\r\nThis is the workflow for generating specific dotfiles for the current hostname and installing them\r\nin the system:\r\n\r\n1. Read the tags activated for this hostname from the tag configuration\r\n2. Create specific dotfiles by (un)commenting tag-blocks\r\n3. Write them to the stage directory\r\n4. (optional) Create symlinks\r\n\r\n## Dotfile generalization\r\nThe generalized dotfile representation resides in the dotfile repository. Here, all tag-blocks are\r\nuncommented to allow editing using syntax highlighting.\r\n\r\nYou can create generic dotfiles from dotfiles currently on stage. This process, reverses the changes\r\nof the specialization and removes all comments from tag-blocks.\r\n\r\nYou can also directly add a file from the system, in which case the following steps are performed:\r\n\r\n1. Move the file to the stage\r\n2. Create a symlink to the file on stage\r\n3. Generalize the file\r\n4. Write it to the dotfile repository\r\n\r\n## Getting started\r\nClone your dotfile repository:\r\n```\r\nmkdir -p ~/repositories\r\ncd ~/repositories\r\ngit clone git@github.com:<user>/dotfiles.git\r\n```\r\n\r\nCreate a tag.conf:\r\n```\r\ncd ~/repositories/dotfiles\r\nmkdir -p .config/dotmgr\r\nvim .config/dotmgr/tags.conf\r\n```\r\n\r\nSpecialize and link all dotfiles in bootstrapping mode:\r\n```\r\ndotmgr.py -bSL\r\n```\r\n\r\nOn consecutive invocations of the script you can omit the `-b` flag, as the tag configuration is now\r\nsymlinked linked to your home directory. Please refer to the scripts `--help` option for more\r\ninformation on command line options and arguments.\r\n\r\n## Advanced vim magic\r\nAdding the following line to your .vimrc automagically invokes the script each time you save a file\r\nin your home directory:\r\n```\r\nautocmd BufWritePost ~/.* !dotmgr.py -g %\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}